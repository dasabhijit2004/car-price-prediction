# -*- coding: utf-8 -*-
"""car-price-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hfO6wshfctM7so1vMinn4VTptc1E-qRO

Import the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection and Processing"""

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('car data.csv')

#inspecting the first 5 rows of the dataframe
car_dataset.head()

# checking the no of rows and columns
car_dataset.shape

# getting some info about the dataset
car_dataset.info()

# checkint the no of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the categorical data"""

# encoding "Fuel_Type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0, 'Diesel':1, 'CNG':2}}, inplace=True)

# encoding "Seller_Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0, 'Individual':1}}, inplace=True)

# encoding "Transmission" column
car_dataset.replace({'Transmission':{'Manual':0, 'Automatic':1}}, inplace=True)

car_dataset.head()

"""Splitting the data into Training data and Test data"""

x = car_dataset.drop(['Car_Name', 'Selling_Price'], axis=1)
y = car_dataset['Selling_Price']

print(x)

print(y)

"""Splitting Training and Test data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=2)

"""Model Train

1. Linear Regression
"""

# loading the linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(x_train, y_train)

"""Model Evaluation"""

# prediction of training data
training_data_prediction = lin_reg_model.predict(x_train)

# R squared Error
error_score = metrics.r2_score(y_train, training_data_prediction)
print("R squared Error: ", error_score)

"""Visualize the actual and predicted prices"""

plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

# prediction of test data
test_data_prediction = lin_reg_model.predict(x_test)

# R squared Error
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error: ", error_score)

plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

"""2. Lasso Regression"""

# loading the linear regression model
lass_reg_model = Lasso()

lass_reg_model.fit(x_train, y_train)

"""Model Evaluation"""

# prediction of training data
training_data_prediction = lass_reg_model.predict(x_train)

# R squared Error
error_score = metrics.r2_score(y_train, training_data_prediction)
print("R squared Error: ", error_score)

"""Visualize the actual and predicted prices"""

plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

# prediction of test data
test_data_prediction = lass_reg_model.predict(x_test)

# R squared Error
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error: ", error_score)

plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()


import pickle

# Save the linear regression model (or lasso if preferred)
filename = 'car_price_model.pkl'
pickle.dump(lin_reg_model, open(filename, 'wb'))

